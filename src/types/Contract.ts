/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ContractInterface extends utils.Interface {
  functions: {
    "addPoolData(string,uint256,uint256,uint256,uint256,string[],uint256,uint256)": FunctionFragment;
    "addressBettingInPool(address,uint256)": FunctionFragment;
    "allMatches(string)": FunctionFragment;
    "allPools(uint256)": FunctionFragment;
    "archivePool(uint256)": FunctionFragment;
    "batchAddMatches(string[],string[],string[],string[])": FunctionFragment;
    "bund()": FunctionFragment;
    "cancelBet(uint256)": FunctionFragment;
    "changeGrader(address)": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "globalBetsID()": FunctionFragment;
    "grader()": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isMatchInPool(string,uint256)": FunctionFragment;
    "matchExists(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "placeBets(uint256,string[],uint256[])": FunctionFragment;
    "poolBetByUser(uint256,address)": FunctionFragment;
    "poolBetCount(uint256)": FunctionFragment;
    "poolSelections(uint256,string)": FunctionFragment;
    "protocolFeeCollector()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMatchStatus(string,uint256)": FunctionFragment;
    "updatePool(uint256,string,uint256,uint256)": FunctionFragment;
    "withdrawProtocolFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPoolData"
      | "addressBettingInPool"
      | "allMatches"
      | "allPools"
      | "archivePool"
      | "batchAddMatches"
      | "bund"
      | "cancelBet"
      | "changeGrader"
      | "claimReward"
      | "emergencyWithdraw"
      | "globalBetsID"
      | "grader"
      | "isAdmin"
      | "isMatchInPool"
      | "matchExists"
      | "owner"
      | "placeBets"
      | "poolBetByUser"
      | "poolBetCount"
      | "poolSelections"
      | "protocolFeeCollector"
      | "renounceOwnership"
      | "setAdmin"
      | "transferOwnership"
      | "updateMatchStatus"
      | "updatePool"
      | "withdrawProtocolFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPoolData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addressBettingInPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allMatches",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allPools",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "archivePool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchAddMatches",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "bund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelBet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGrader",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalBetsID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "grader", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMatchInPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "matchExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBets",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolBetByUser",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolBetCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolSelections",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMatchStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressBettingInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allMatches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "archivePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchAddMatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeGrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalBetsID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grader", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMatchInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolBetByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolBetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolSelections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMatchStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolFee",
    data: BytesLike
  ): Result;

  events: {
    "AdminAccessSet(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "betPlaced(uint256,address,uint256[])": EventFragment;
    "emergencyWithdrawal(address,uint256)": EventFragment;
    "matchAdded(string)": EventFragment;
    "matchGraded(string,uint256,address)": EventFragment;
    "poolAdded(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "poolArchived(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminAccessSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "betPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "emergencyWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "matchAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "matchGraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "poolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "poolArchived"): EventFragment;
}

export interface AdminAccessSetEventObject {
  _admin: string;
  _enabled: boolean;
}
export type AdminAccessSetEvent = TypedEvent<
  [string, boolean],
  AdminAccessSetEventObject
>;

export type AdminAccessSetEventFilter = TypedEventFilter<AdminAccessSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface betPlacedEventObject {
  poolID: BigNumber;
  better: string;
  selections: BigNumber[];
}
export type betPlacedEvent = TypedEvent<
  [BigNumber, string, BigNumber[]],
  betPlacedEventObject
>;

export type betPlacedEventFilter = TypedEventFilter<betPlacedEvent>;

export interface emergencyWithdrawalEventObject {
  withdrawnTo: string;
  amount: BigNumber;
}
export type emergencyWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  emergencyWithdrawalEventObject
>;

export type emergencyWithdrawalEventFilter =
  TypedEventFilter<emergencyWithdrawalEvent>;

export interface matchAddedEventObject {
  espn_id: string;
}
export type matchAddedEvent = TypedEvent<[string], matchAddedEventObject>;

export type matchAddedEventFilter = TypedEventFilter<matchAddedEvent>;

export interface matchGradedEventObject {
  espn_id: string;
  statusCode: BigNumber;
  grader: string;
}
export type matchGradedEvent = TypedEvent<
  [string, BigNumber, string],
  matchGradedEventObject
>;

export type matchGradedEventFilter = TypedEventFilter<matchGradedEvent>;

export interface poolAddedEventObject {
  poolID: BigNumber;
  matchCount: BigNumber;
  winPercentage: BigNumber;
  start_time: BigNumber;
  end_time: BigNumber;
}
export type poolAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  poolAddedEventObject
>;

export type poolAddedEventFilter = TypedEventFilter<poolAddedEvent>;

export interface poolArchivedEventObject {
  poolID: BigNumber;
}
export type poolArchivedEvent = TypedEvent<
  [BigNumber],
  poolArchivedEventObject
>;

export type poolArchivedEventFilter = TypedEventFilter<poolArchivedEvent>;

export interface Contract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPoolData(
      pool_name: PromiseOrValue<string>,
      entry_fee: PromiseOrValue<BigNumberish>,
      protocol_fee: PromiseOrValue<BigNumberish>,
      bet_start_time: PromiseOrValue<BigNumberish>,
      bet_end_time: PromiseOrValue<BigNumberish>,
      match_ids: PromiseOrValue<string>[],
      max_participants: PromiseOrValue<BigNumberish>,
      winnerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressBettingInPool(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allMatches(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, number] & {
        espn_id: string;
        name: string;
        teamA: string;
        teamB: string;
        status: number;
      }
    >;

    allPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        poolID: BigNumber;
        poolName: string;
        startTime: BigNumber;
        endTime: BigNumber;
        entryFee: BigNumber;
        protocolFee: BigNumber;
        winnerPercentage: BigNumber;
        maxParticipants: BigNumber;
        isArchived: boolean;
      }
    >;

    archivePool(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchAddMatches(
      espn_ids: PromiseOrValue<string>[],
      match_names: PromiseOrValue<string>[],
      teamAs: PromiseOrValue<string>[],
      teamBs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bund(overrides?: CallOverrides): Promise<[string]>;

    cancelBet(
      pool_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeGrader(
      _grader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      pool_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    globalBetsID(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    grader(overrides?: CallOverrides): Promise<[string]>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMatchInPool(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    matchExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeBets(
      pool_id: PromiseOrValue<BigNumberish>,
      match_ids: PromiseOrValue<string>[],
      selections: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolBetByUser(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, boolean, BigNumber] & {
        poolID: BigNumber;
        user: string;
        selectionID: BigNumber;
        isActive: boolean;
        score: BigNumber;
      }
    >;

    poolBetCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolSelections(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      admin: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMatchStatus(
      matchID: PromiseOrValue<string>,
      statusCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      poolID: PromiseOrValue<BigNumberish>,
      _poolName: PromiseOrValue<string>,
      _entryFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addPoolData(
    pool_name: PromiseOrValue<string>,
    entry_fee: PromiseOrValue<BigNumberish>,
    protocol_fee: PromiseOrValue<BigNumberish>,
    bet_start_time: PromiseOrValue<BigNumberish>,
    bet_end_time: PromiseOrValue<BigNumberish>,
    match_ids: PromiseOrValue<string>[],
    max_participants: PromiseOrValue<BigNumberish>,
    winnerPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressBettingInPool(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allMatches(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, number] & {
      espn_id: string;
      name: string;
      teamA: string;
      teamB: string;
      status: number;
    }
  >;

  allPools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      poolID: BigNumber;
      poolName: string;
      startTime: BigNumber;
      endTime: BigNumber;
      entryFee: BigNumber;
      protocolFee: BigNumber;
      winnerPercentage: BigNumber;
      maxParticipants: BigNumber;
      isArchived: boolean;
    }
  >;

  archivePool(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchAddMatches(
    espn_ids: PromiseOrValue<string>[],
    match_names: PromiseOrValue<string>[],
    teamAs: PromiseOrValue<string>[],
    teamBs: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bund(overrides?: CallOverrides): Promise<string>;

  cancelBet(
    pool_id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeGrader(
    _grader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    pool_id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  globalBetsID(overrides?: CallOverrides): Promise<BigNumber>;

  grader(overrides?: CallOverrides): Promise<string>;

  isAdmin(
    admin: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMatchInPool(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  matchExists(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeBets(
    pool_id: PromiseOrValue<BigNumberish>,
    match_ids: PromiseOrValue<string>[],
    selections: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolBetByUser(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, boolean, BigNumber] & {
      poolID: BigNumber;
      user: string;
      selectionID: BigNumber;
      isActive: boolean;
      score: BigNumber;
    }
  >;

  poolBetCount(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolSelections(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  protocolFeeCollector(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    admin: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMatchStatus(
    matchID: PromiseOrValue<string>,
    statusCode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    poolID: PromiseOrValue<BigNumberish>,
    _poolName: PromiseOrValue<string>,
    _entryFee: PromiseOrValue<BigNumberish>,
    _protocolFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolFee(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPoolData(
      pool_name: PromiseOrValue<string>,
      entry_fee: PromiseOrValue<BigNumberish>,
      protocol_fee: PromiseOrValue<BigNumberish>,
      bet_start_time: PromiseOrValue<BigNumberish>,
      bet_end_time: PromiseOrValue<BigNumberish>,
      match_ids: PromiseOrValue<string>[],
      max_participants: PromiseOrValue<BigNumberish>,
      winnerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressBettingInPool(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allMatches(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, number] & {
        espn_id: string;
        name: string;
        teamA: string;
        teamB: string;
        status: number;
      }
    >;

    allPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        poolID: BigNumber;
        poolName: string;
        startTime: BigNumber;
        endTime: BigNumber;
        entryFee: BigNumber;
        protocolFee: BigNumber;
        winnerPercentage: BigNumber;
        maxParticipants: BigNumber;
        isArchived: boolean;
      }
    >;

    archivePool(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchAddMatches(
      espn_ids: PromiseOrValue<string>[],
      match_names: PromiseOrValue<string>[],
      teamAs: PromiseOrValue<string>[],
      teamBs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    bund(overrides?: CallOverrides): Promise<string>;

    cancelBet(
      pool_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeGrader(
      _grader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      pool_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    globalBetsID(overrides?: CallOverrides): Promise<BigNumber>;

    grader(overrides?: CallOverrides): Promise<string>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMatchInPool(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    matchExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeBets(
      pool_id: PromiseOrValue<BigNumberish>,
      match_ids: PromiseOrValue<string>[],
      selections: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    poolBetByUser(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, boolean, BigNumber] & {
        poolID: BigNumber;
        user: string;
        selectionID: BigNumber;
        isActive: boolean;
        score: BigNumber;
      }
    >;

    poolBetCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolSelections(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(
      admin: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMatchStatus(
      matchID: PromiseOrValue<string>,
      statusCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      poolID: PromiseOrValue<BigNumberish>,
      _poolName: PromiseOrValue<string>,
      _entryFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProtocolFee(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminAccessSet(address,bool)"(
      _admin?: null,
      _enabled?: null
    ): AdminAccessSetEventFilter;
    AdminAccessSet(_admin?: null, _enabled?: null): AdminAccessSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "betPlaced(uint256,address,uint256[])"(
      poolID?: PromiseOrValue<BigNumberish> | null,
      better?: PromiseOrValue<string> | null,
      selections?: null
    ): betPlacedEventFilter;
    betPlaced(
      poolID?: PromiseOrValue<BigNumberish> | null,
      better?: PromiseOrValue<string> | null,
      selections?: null
    ): betPlacedEventFilter;

    "emergencyWithdrawal(address,uint256)"(
      withdrawnTo?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): emergencyWithdrawalEventFilter;
    emergencyWithdrawal(
      withdrawnTo?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): emergencyWithdrawalEventFilter;

    "matchAdded(string)"(
      espn_id?: PromiseOrValue<string> | null
    ): matchAddedEventFilter;
    matchAdded(espn_id?: PromiseOrValue<string> | null): matchAddedEventFilter;

    "matchGraded(string,uint256,address)"(
      espn_id?: PromiseOrValue<string> | null,
      statusCode?: PromiseOrValue<BigNumberish> | null,
      grader?: PromiseOrValue<string> | null
    ): matchGradedEventFilter;
    matchGraded(
      espn_id?: PromiseOrValue<string> | null,
      statusCode?: PromiseOrValue<BigNumberish> | null,
      grader?: PromiseOrValue<string> | null
    ): matchGradedEventFilter;

    "poolAdded(uint256,uint256,uint256,uint256,uint256)"(
      poolID?: PromiseOrValue<BigNumberish> | null,
      matchCount?: PromiseOrValue<BigNumberish> | null,
      winPercentage?: PromiseOrValue<BigNumberish> | null,
      start_time?: null,
      end_time?: null
    ): poolAddedEventFilter;
    poolAdded(
      poolID?: PromiseOrValue<BigNumberish> | null,
      matchCount?: PromiseOrValue<BigNumberish> | null,
      winPercentage?: PromiseOrValue<BigNumberish> | null,
      start_time?: null,
      end_time?: null
    ): poolAddedEventFilter;

    "poolArchived(uint256)"(poolID?: null): poolArchivedEventFilter;
    poolArchived(poolID?: null): poolArchivedEventFilter;
  };

  estimateGas: {
    addPoolData(
      pool_name: PromiseOrValue<string>,
      entry_fee: PromiseOrValue<BigNumberish>,
      protocol_fee: PromiseOrValue<BigNumberish>,
      bet_start_time: PromiseOrValue<BigNumberish>,
      bet_end_time: PromiseOrValue<BigNumberish>,
      match_ids: PromiseOrValue<string>[],
      max_participants: PromiseOrValue<BigNumberish>,
      winnerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressBettingInPool(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allMatches(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    archivePool(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchAddMatches(
      espn_ids: PromiseOrValue<string>[],
      match_names: PromiseOrValue<string>[],
      teamAs: PromiseOrValue<string>[],
      teamBs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bund(overrides?: CallOverrides): Promise<BigNumber>;

    cancelBet(
      pool_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeGrader(
      _grader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReward(
      pool_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    globalBetsID(overrides?: CallOverrides): Promise<BigNumber>;

    grader(overrides?: CallOverrides): Promise<BigNumber>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMatchInPool(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeBets(
      pool_id: PromiseOrValue<BigNumberish>,
      match_ids: PromiseOrValue<string>[],
      selections: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolBetByUser(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolBetCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolSelections(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      admin: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMatchStatus(
      matchID: PromiseOrValue<string>,
      statusCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePool(
      poolID: PromiseOrValue<BigNumberish>,
      _poolName: PromiseOrValue<string>,
      _entryFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawProtocolFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPoolData(
      pool_name: PromiseOrValue<string>,
      entry_fee: PromiseOrValue<BigNumberish>,
      protocol_fee: PromiseOrValue<BigNumberish>,
      bet_start_time: PromiseOrValue<BigNumberish>,
      bet_end_time: PromiseOrValue<BigNumberish>,
      match_ids: PromiseOrValue<string>[],
      max_participants: PromiseOrValue<BigNumberish>,
      winnerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressBettingInPool(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allMatches(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    archivePool(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchAddMatches(
      espn_ids: PromiseOrValue<string>[],
      match_names: PromiseOrValue<string>[],
      teamAs: PromiseOrValue<string>[],
      teamBs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelBet(
      pool_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeGrader(
      _grader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      pool_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    globalBetsID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMatchInPool(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBets(
      pool_id: PromiseOrValue<BigNumberish>,
      match_ids: PromiseOrValue<string>[],
      selections: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolBetByUser(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolBetCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolSelections(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeCollector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      admin: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMatchStatus(
      matchID: PromiseOrValue<string>,
      statusCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      poolID: PromiseOrValue<BigNumberish>,
      _poolName: PromiseOrValue<string>,
      _entryFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
